#SAM Template - defines the application
#AWS SAM is a model used to define serverless applications on AWS
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CD Demo Lambda
Resources:
    #Defining the lambda function for testing
    CDDemoLambda:
        Type: AWS::Serverless::Function
        Properties:
            Handler: lambdaFunction.lambda_handler
            Runtime: python3.8
            CodeUri: ./services
            Description: 'Lambda function for CD Demo'
            MemorySize: 128
            Timeout: 30
            Role: arn:aws:iam::386260696605:role/custom-lambda-role
            Events:
                getAZsAPI:
                    Type: Api
                    Properties:
                        Path: /getazs
                        Method: post
            Environment:
                Variables:
                    REGION: ap-southeast-1
    
    #search model lambda function
    ModelSearchLambda:
        Type: AWS::Serverless::Function
        Properties:
            Handler: car-model-search.lambda_handler
            Runtime: python3.8
            CodeUri: ./services
            Description: 'Lambda function for car model search'
            MemorySize: 128
            Policies:
                - AmazonDynamoDBFullAccess
                - AWSLambdaVPCAccessExecutionRole
            Timeout: 30
            VpcConfig:
                SecurityGroupIds: 
                    - !GetAtt getUrlSecurityGroup.GroupId
                SubnetIds:
                    - !Ref getUrlSubnet
            Events:
                scanCarModelAPI:
                    Type: Api
                    Properties:
                        Path: /car-model-search
                        Method: post
            Environment:
                Variables:
                    REGION: ap-southeast-1
    #create subnet                 
    getUrlSubnet:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone:
                Fn::Select:
                    - 0
                    - Fn::GetAZs: ''
            CidrBlock: 10.0.0.0/20
            Tags:
                - Key: Name
                  Value: getUrl-sample
            VpcId: !Ref getUrlVpc

    #create security group
    getUrlSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Security Group for GetUrl
            GroupName: getUrl-sample
            VpcId: !Ref getUrlVpc
            
    #create vpc
    getUrlVpc:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: 10.0.0.0/16
            EnableDnsHostnames: true
            EnableDnsSupport: true
            InstanceTenancy: default
            Tags:
              - Key: Name
                Value: getUrl-sample
    #Create private route table
    privateRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref getUrlVpc
    
    #Create public route table 
    publicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref getUrlVpc

    #create dynamodb vpc endpoint 
    DynamoDBEndpoint:
        Type: "AWS::EC2::VPCEndpoint"
        Properties:
            RouteTableIds:
                - !Ref PublicRouteTable
                - !Ref privateRouteTable
            ServiceName:
                !Sub "com.amazonaws.${AWS::Region}.dynamodb"
            VpcId: !Ref getUrlVpc

    ##################################################################################################
    
    #retrieve price lambda function
    PriceRetrievalLambda:
        Type: AWS::Serverless::Function
        Properties:
            Handler: car-price-retrieval.lambda_handler
            Runtime: python3.8
            CodeUri: ./services
            Description: 'Lambda function for car price retrieve'
            MemorySize: 128
            Timeout: 30
            Role: arn:aws:iam::386260696605:role/custom-lambda-role
            Events:
                getCarPriceAPI:
                    Type: Api
                    Properties:
                        Path: /car-price
                        Method: post
            Environment:
                Variables:
                    REGION: ap-southeast-1                

    #retrieve options lambda function
    OptionsRetrievalLambda:
        Type: AWS::Serverless::Function
        Properties:
            Handler: car-option-retrieval.lambda_handler
            Runtime: python3.8
            CodeUri: ./services
            Description: 'Lambda function for car options retrieve'
            MemorySize: 128
            Timeout: 30
            Role: arn:aws:iam::386260696605:role/custom-lambda-role
            Events:
                getCarOptionsAPI:
                    Type: Api
                    Properties:
                        Path: /car-options
                        Method: post
            Environment:
                Variables:
                    REGION: ap-southeast-1
